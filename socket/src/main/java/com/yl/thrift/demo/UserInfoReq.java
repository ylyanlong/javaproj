/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yl.thrift.demo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-24")
public class UserInfoReq implements org.apache.thrift.TBase<UserInfoReq, UserInfoReq._Fields>, java.io.Serializable, Cloneable, Comparable<UserInfoReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserInfoReq");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField APPDATA_FIELD_DESC = new org.apache.thrift.protocol.TField("appdata", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXTDINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("extdinfo", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserInfoReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserInfoReqTupleSchemeFactory());
  }

  public long uid; // required
  public String appdata; // optional
  public Map<String,String> extdinfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    APPDATA((short)2, "appdata"),
    EXTDINFO((short)9, "extdinfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // APPDATA
          return APPDATA;
        case 9: // EXTDINFO
          return EXTDINFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.APPDATA,_Fields.EXTDINFO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APPDATA, new org.apache.thrift.meta_data.FieldMetaData("appdata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTDINFO, new org.apache.thrift.meta_data.FieldMetaData("extdinfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfoReq.class, metaDataMap);
  }

  public UserInfoReq() {
    this.uid = 100L;

  }

  public UserInfoReq(
    long uid)
  {
    this();
    this.uid = uid;
    setUidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserInfoReq(UserInfoReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.uid = other.uid;
    if (other.isSetAppdata()) {
      this.appdata = other.appdata;
    }
    if (other.isSetExtdinfo()) {
      Map<String,String> __this__extdinfo = new HashMap<String,String>(other.extdinfo);
      this.extdinfo = __this__extdinfo;
    }
  }

  public UserInfoReq deepCopy() {
    return new UserInfoReq(this);
  }

  @Override
  public void clear() {
    this.uid = 100L;

    this.appdata = null;
    this.extdinfo = null;
  }

  public long getUid() {
    return this.uid;
  }

  public UserInfoReq setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public String getAppdata() {
    return this.appdata;
  }

  public UserInfoReq setAppdata(String appdata) {
    this.appdata = appdata;
    return this;
  }

  public void unsetAppdata() {
    this.appdata = null;
  }

  /** Returns true if field appdata is set (has been assigned a value) and false otherwise */
  public boolean isSetAppdata() {
    return this.appdata != null;
  }

  public void setAppdataIsSet(boolean value) {
    if (!value) {
      this.appdata = null;
    }
  }

  public int getExtdinfoSize() {
    return (this.extdinfo == null) ? 0 : this.extdinfo.size();
  }

  public void putToExtdinfo(String key, String val) {
    if (this.extdinfo == null) {
      this.extdinfo = new HashMap<String,String>();
    }
    this.extdinfo.put(key, val);
  }

  public Map<String,String> getExtdinfo() {
    return this.extdinfo;
  }

  public UserInfoReq setExtdinfo(Map<String,String> extdinfo) {
    this.extdinfo = extdinfo;
    return this;
  }

  public void unsetExtdinfo() {
    this.extdinfo = null;
  }

  /** Returns true if field extdinfo is set (has been assigned a value) and false otherwise */
  public boolean isSetExtdinfo() {
    return this.extdinfo != null;
  }

  public void setExtdinfoIsSet(boolean value) {
    if (!value) {
      this.extdinfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case APPDATA:
      if (value == null) {
        unsetAppdata();
      } else {
        setAppdata((String)value);
      }
      break;

    case EXTDINFO:
      if (value == null) {
        unsetExtdinfo();
      } else {
        setExtdinfo((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return Long.valueOf(getUid());

    case APPDATA:
      return getAppdata();

    case EXTDINFO:
      return getExtdinfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case APPDATA:
      return isSetAppdata();
    case EXTDINFO:
      return isSetExtdinfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserInfoReq)
      return this.equals((UserInfoReq)that);
    return false;
  }

  public boolean equals(UserInfoReq that) {
    if (that == null)
      return false;

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_appdata = true && this.isSetAppdata();
    boolean that_present_appdata = true && that.isSetAppdata();
    if (this_present_appdata || that_present_appdata) {
      if (!(this_present_appdata && that_present_appdata))
        return false;
      if (!this.appdata.equals(that.appdata))
        return false;
    }

    boolean this_present_extdinfo = true && this.isSetExtdinfo();
    boolean that_present_extdinfo = true && that.isSetExtdinfo();
    if (this_present_extdinfo || that_present_extdinfo) {
      if (!(this_present_extdinfo && that_present_extdinfo))
        return false;
      if (!this.extdinfo.equals(that.extdinfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true;
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_appdata = true && (isSetAppdata());
    list.add(present_appdata);
    if (present_appdata)
      list.add(appdata);

    boolean present_extdinfo = true && (isSetExtdinfo());
    list.add(present_extdinfo);
    if (present_extdinfo)
      list.add(extdinfo);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserInfoReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppdata()).compareTo(other.isSetAppdata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppdata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appdata, other.appdata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtdinfo()).compareTo(other.isSetExtdinfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtdinfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extdinfo, other.extdinfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserInfoReq(");
    boolean first = true;

    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (isSetAppdata()) {
      if (!first) sb.append(", ");
      sb.append("appdata:");
      if (this.appdata == null) {
        sb.append("null");
      } else {
        sb.append(this.appdata);
      }
      first = false;
    }
    if (isSetExtdinfo()) {
      if (!first) sb.append(", ");
      sb.append("extdinfo:");
      if (this.extdinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.extdinfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'uid' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserInfoReqStandardSchemeFactory implements SchemeFactory {
    public UserInfoReqStandardScheme getScheme() {
      return new UserInfoReqStandardScheme();
    }
  }

  private static class UserInfoReqStandardScheme extends StandardScheme<UserInfoReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfoReq struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPDATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appdata = iprot.readString();
              struct.setAppdataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXTDINFO
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.extdinfo = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.extdinfo.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setExtdinfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUid()) {
        throw new TProtocolException("Required field 'uid' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfoReq struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      if (struct.appdata != null) {
        if (struct.isSetAppdata()) {
          oprot.writeFieldBegin(APPDATA_FIELD_DESC);
          oprot.writeString(struct.appdata);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extdinfo != null) {
        if (struct.isSetExtdinfo()) {
          oprot.writeFieldBegin(EXTDINFO_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extdinfo.size()));
            for (Map.Entry<String, String> _iter4 : struct.extdinfo.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserInfoReqTupleSchemeFactory implements SchemeFactory {
    public UserInfoReqTupleScheme getScheme() {
      return new UserInfoReqTupleScheme();
    }
  }

  private static class UserInfoReqTupleScheme extends TupleScheme<UserInfoReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserInfoReq struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.uid);
      BitSet optionals = new BitSet();
      if (struct.isSetAppdata()) {
        optionals.set(0);
      }
      if (struct.isSetExtdinfo()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAppdata()) {
        oprot.writeString(struct.appdata);
      }
      if (struct.isSetExtdinfo()) {
        {
          oprot.writeI32(struct.extdinfo.size());
          for (Map.Entry<String, String> _iter5 : struct.extdinfo.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserInfoReq struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uid = iprot.readI64();
      struct.setUidIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.appdata = iprot.readString();
        struct.setAppdataIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extdinfo = new HashMap<String,String>(2*_map6.size);
          String _key7;
          String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.extdinfo.put(_key7, _val8);
          }
        }
        struct.setExtdinfoIsSet(true);
      }
    }
  }

}

